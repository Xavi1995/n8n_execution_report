{
  "name": "Auditor",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1660,
        -340
      ],
      "id": "0c593713-ea91-43f0-9947-0ec3d82a3480",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/Xavi1995/models_pricing/refs/heads/main/prices",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -700,
        -660
      ],
      "id": "e6ef92e5-ab9e-4010-885e-d53656225d63",
      "name": "get_model_prices"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -540,
        0
      ],
      "id": "9313e075-81f6-41d5-885b-a28cbfad2bc8",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nreturn $input.first().json.sub_workflows"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -800,
        0
      ],
      "id": "2d61e4d5-3b85-49e8-a9e6-f90d279364c0",
      "name": "Code2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ab2b0724-8418-4e58-b6c3-0b91ae2498da",
              "leftValue": "={{ $json.sub_workflows }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "7f008679-ae34-4f6f-86ab-15f50d013607",
              "leftValue": "={{ $json.sub_workflows }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        200,
        500
      ],
      "id": "690cc4fd-7905-4ad6-8ca6-b0dfbc665843",
      "name": "If2"
    },
    {
      "parameters": {
        "jsCode": "const prices = $input.first().json\nconst aiNodes = $('has_ai_node').first().json.ai_nodes\nconst aiNodesInfo = []\nconst nodesData = $('get_execution_info').first().json.data.resultData.runData\nconst nodeWorkflowData = $('get_execution_info').first().json.workflowData.nodes\n\n\nfor(let i = 0; i < aiNodes.length; i++) {\n  const aiNode = aiNodes[i]\n  const nodeData = nodesData[aiNode.node_name]\n  for(let y = 0; y < nodeWorkflowData.length ; y ++) {\n    if(aiNode.node_name == nodeWorkflowData[y].name) {\n      aiNodesInfo.push(getAiNodesInfo(aiNode, nodeWorkflowData[y], nodeData))\n    }\n  }\n}\n\nfunction getAiNodesInfo(node, workflowData, nodeData){\n  if(node.model_used == null) {\n    return {\n      \"name\" : node.node_name,\n      \"type\" : workflowData.type,\n      \"execution_time\" : nodeData[0].executionTime\n    }\n  } else {\n    return {\n    \"name\" : node.node_name,\n    \"type\" : workflowData.type,\n    \"execution_time\" : nodeData[0].executionTime,\n    \"ai_details\" : {\n      \"model_used\" : node.model_used,\n      \"completion_tokens\" : node.completion_tokens,\n      \"prompt_tokens\" : node.prompt_tokens,\n      \"total_tokens\" : node.total_tokens,\n      \"cost_execution\" : getExecutionCost(node)\n    }\n  }\n  }\n}\n\nfunction getExecutionCost(node){\n    const completionTokens = node.completion_tokens\n    const promptTokens = node.prompt_tokens\n    let price = {}\n    \n    const model = node.model_used;\n    if(model == 'deepseek-chat' || model == 'deepseek-reasoner') {\n      const now = new Date($('get_execution_info').first().json.startedAt)\n      const currentHour = now.getUTCHours()\n      const currentMinute = now.getUTCMinutes()\n\n      const totalMinutes = currentHour * 60 + currentMinute\n\n      const startThreshold = 0 * 60 + 30\n      const endThreshold = 16 * 60 + 30\n      \n      if(totalMinutes >= startThreshold && totalMinutes < endThreshold) {\n        price = prices[`${model}-standard`]\n      } else {\n        price = prices[`${model}-discount`]\n      }\n    } else {\n      price = prices[model];\n    }\n  if(price == null) {\n    return 'Price not available';\n  } else {\n    const nodePrice = (completionTokens / 1000) * price.completion + (promptTokens / 1000) * price.prompt;\n     return `$${nodePrice.toFixed(5)}`;\n  }\n    \n    \n    \n}\n\nconst output = aiNodesInfo\n\nreturn {\n  \"ai_nodes\" : output\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -460,
        -660
      ],
      "id": "8610c298-2275-4a9d-8653-732c1d48adfe",
      "name": "get_ai_nodes_info"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -300,
        -360
      ],
      "id": "0b93c0b2-6e7f-4006-8d50-5f7258e64676",
      "name": "Merge"
    },
    {
      "parameters": {
        "url": "=https://xavicascoll.app.n8n.cloud/api/v1/executions/{{ $json.execution_id }}",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "{\n  \"includeData\" : true\n}",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"X-N8N-API-KEY\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiYzAyNzRkMy03YWYyLTQzZjktYTU4NS1mY2M0ODQ3NDdjYzkiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzQzODQ2NDE3LCJleHAiOjE3NDYzOTYwMDB9.7fm0EcDsC7DikCxLWPS5HYp80jPPK2RpOMpQje-7t3o\",\n  \"Accept\" : \"application/json\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -360,
        260
      ],
      "id": "3e854706-15f8-47c1-b98f-8a3f85df2bd2",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json;\nconst data = input.data;\nconst workflowInfo = input.workflowData;\nlet nodes = []\nlet nonAiNodes = []\nlet subworkflowNodes = []\nlet aiNodes = []\n\ngetNodesInfo(data)\n\nconst workFlowData = {\n  \"nombre\" : workflowInfo.name,\n  \"fecha_ejecucion\" : formatDate(input.startedAt),\n  \"duracion\" : getExecutionDuration(input.startedAt, input.stoppedAt),\n  \"ai_nodes\" : aiNodes,\n  \"normal_nodes\" : nonAiNodes,\n  \"sub_workflows\" : subworkflowNodes\n  \n}\n\n\nfunction getNodesInfo(data) {\n  let nodesCount = 0\n  \n  const object = Object.keys(data.resultData.runData);\n  object.map((node) => {\n    if( data.resultData.runData[node][0].executionStatus == 'success') {\n      nodesCount += 1;\n      nodes.push(node)\n      \n    }\n  })\n\n  for (let i = 0; i < nodes.length; i++) {\n    const element = nodes[i];\n    \n    getTypeNode(element)\n    \n  }\n}\n\nfunction getTypeNode(node){\n  for (let index = 0; index < $input.first().json.workflowData.nodes.length; index++) {\n    const element = $input.first().json.workflowData.nodes[index];\n    if(element.name == node) {\n      if(element.type.includes('lmChat')) {\n        // AI Node\n        const nodeTokenInfo = $input.first().json.data.resultData.runData[element.name][0].data.ai_languageModel[0][0].json.tokenUsage\n        const modelUsed =  $input.first().json.data.resultData.runData[element.name][0].inputOverride.ai_languageModel[0][0].json.options.model\n        aiNodes.push({\n          \"node_name\" : node,\n          \"model_used\" : modelUsed,\n          \"completion_tokens\" : nodeTokenInfo.completionTokens,\n          \"prompt_tokens\" : nodeTokenInfo.promptTokens,\n          \"total_tokens\" : nodeTokenInfo.totalTokens\n        })\n      } else if( element.type.includes('agent')) {\n        aiNodes.push({\n          \"node_name\" : node,\n          \"executionTime\" :  $input.first().json.data.resultData.runData[element.name][0].executionTime\n        })\n      } \n      \n      else if(element.type.includes('toolWorkflow') || element.type.includes('executeWorkflow') && !element.type.includes('executeWorkflowTrigger')) {\n        let nodeObject = {}\n        const runDataNode = $input.first().json.data.resultData.runData[element.name][0].metadata.subExecution\n        nodeObject[\"nombre\"] = node\n        nodeObject[\"execution_id\"] = runDataNode.executionId\n        nodeObject[\"workflow_id\"] = runDataNode.workflowId\n        subworkflowNodes.push(nodeObject)\n      } else if(element.type.includes('executeWorkflowTrigger')){\n        break\n      }\n      else {\n        // Non AI Workflow\n        nonAiNodes.push(node)\n      }\n    } \n  }\n\n}\n\nfunction formatDate(date){\n    const dateO = new Date(date);\n\n  const day = String(dateO.getUTCDate()).padStart(2, '0');\n  const month = String(dateO.getUTCMonth() + 1).padStart(2, '0');\n  const year = dateO.getUTCFullYear();\n\n  const hours = String(dateO.getUTCHours()).padStart(2, '0');\n  const minutes = String(dateO.getUTCMinutes()).padStart(2, '0');\n  const seconds = String(dateO.getUTCSeconds()).padStart(2, '0');\n\n  return `${day}/${month}/${year} - ${hours}:${minutes}:${seconds}`;\n}\nfunction getExecutionDuration(started, ended) {\n  const startDate = new Date(started)\n  const endDate = new Date(ended)\n  const durationMS = endDate - startDate\n  return durationMS / 1000;\n}\n\n\nreturn  workFlowData\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        260
      ],
      "id": "379224f8-bdb0-4550-8f92-33fb3ed2add6",
      "name": "Code5"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        180,
        -340
      ],
      "id": "31a3d9df-27a8-4db2-a184-b2690531071a",
      "name": "Merge2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a8e9a937-7e5b-4145-aabe-71c7077045bd",
              "leftValue": "={{ $json.ai_nodes[0] }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "98db7a1a-3af3-465a-813d-1a17416b02c3",
              "leftValue": "={{ $json.ai_nodes[0] }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        0,
        100
      ],
      "id": "bd382958-23d4-4d35-8c79-97113adc42b1",
      "name": "If3"
    },
    {
      "parameters": {
        "jsCode": "const normal_nodes = $input.first().json.normal_nodes\nconst nodes_runData = $('HTTP Request2').first().json.data.resultData.runData\nconst workflowData  = $('HTTP Request2').first().json.workflowData.nodes\nconst executedNodes = []\nconst nonAiNodes = []\ngetExecutedNodesWorkFlowData()\nfunction getExecutedNodesWorkFlowData(){\n  for(let y = 0; y < normal_nodes.length ; y ++) {\n    const nodeName = normal_nodes[y]\n    const workflowDataNode = workflowData.find((element, index) => element.name == nodeName)\n    let runDataNode = {}\n    for(const key in nodes_runData) {\n      if (key === nodeName) {\n        runDataNode = nodes_runData[key][0]\n        break\n      }\n    }\n    nonAiNodes.push({\n      \"name\" : nodeName,\n      \"type\" : workflowDataNode.type,\n      \"execution_time\" : runDataNode.executionTime\n    })\n  }  \n}\n\n\nreturn {\n  \"non_ai_nodes\" : nonAiNodes\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        200,
        260
      ],
      "id": "8a465b23-6050-41e6-97c6-1452584d6275",
      "name": "Code3"
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/Xavi1995/models_pricing/refs/heads/main/prices",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        80
      ],
      "id": "336a368f-4aaf-440b-9f3f-1285fdfb7398",
      "name": "get_model_prices1"
    },
    {
      "parameters": {
        "jsCode": "const prices = $input.first().json\nconst aiNodes = $('If3').first().json.ai_nodes\nconst aiNodesInfo = []\nconst nodesData = $('HTTP Request2').first().json.data.resultData.runData\nconst nodeWorkflowData = $('HTTP Request2').first().json.workflowData.nodes\n\n\nfor(let i = 0; i < aiNodes.length; i++) {\n  const aiNode = aiNodes[i]\n  const nodeData = nodesData[aiNode.node_name]\n  for(let y = 0; y < nodeWorkflowData.length ; y ++) {\n    if(aiNode.node_name == nodeWorkflowData[y].name) {\n      aiNodesInfo.push(getAiNodesInfo(aiNode, nodeWorkflowData[y], nodeData))\n    }\n  }\n}\n\nfunction getAiNodesInfo(node, workflowData, nodeData){\n  if(node.model_used == null) {\n    return {\n      \"name\" : node.node_name,\n      \"type\" : workflowData.type,\n      \"execution_time\" : nodeData[0].executionTime\n    }\n  } else {\n    return {\n    \"name\" : node.node_name,\n    \"type\" : workflowData.type,\n    \"execution_time\" : nodeData[0].executionTime,\n    \"ai_details\" : {\n      \"model_used\" : node.model_used,\n      \"completion_tokens\" : node.completion_tokens,\n      \"prompt_tokens\" : node.prompt_tokens,\n      \"total_tokens\" : node.total_tokens,\n      \"cost_execution\" : getExecutionCost(node)\n    }\n  }\n  }\n}\n\nfunction getExecutionCost(node){\n    const completionTokens = node.completion_tokens\n    const promptTokens = node.prompt_tokens\n    let price = {}\n    \n    const model = node.model_used;\n    if(model == 'deepseek-chat' || model == 'deepseek-reasoner') {\n      const now = new Date($('get_execution_info').first().json.startedAt)\n      const currentHour = now.getUTCHours()\n      const currentMinute = now.getUTCMinutes()\n\n      const totalMinutes = currentHour * 60 + currentMinute\n\n      const startThreshold = 0 * 60 + 30\n      const endThreshold = 16 * 60 + 30\n      \n      if(totalMinutes >= startThreshold && totalMinutes < endThreshold) {\n        price = prices[`${model}-standard`]\n      } else {\n        price = prices[`${model}-discount`]\n      }\n    } else {\n      price = prices[model];\n    }\n    \n    const nodePrice = (completionTokens / 1000) * price.completion + (promptTokens / 1000) * price.prompt;\n     return `$${nodePrice.toFixed(5)}`;\n    \n}\n\nconst output = aiNodesInfo\n\nreturn {\n  \"ai_nodes\" : output\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        580,
        80
      ],
      "id": "c9988f19-6cce-4372-b9f7-9766fbeb0293",
      "name": "get_ai_nodes_info1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        800,
        240
      ],
      "id": "d1223088-6214-4017-9977-5463b3510f10",
      "name": "Merge1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json\nconst output = {}\n\noutput[\"workflow_name\"] = $('Code5').first().json.nombre\noutput[\"workflow_id\"] = $('HTTP Request2').first().json.workflowId\noutput[\"execution_id\"] = $('HTTP Request2').first().json.id\noutput[\"finished\"] = $('HTTP Request2').first().json.finished\noutput[\"execution_status\"] = $('HTTP Request2').first().json.status\noutput[\"execution_date\"] = $('Code5').first().json.fecha_ejecucion\noutput[\"execution_duration\"] = $('Code5').first().json.duracion\nif($input.first().json.ai_nodes != null) {\n  output[\"total_cost\"] = getTotalCost($input.first().json.ai_nodes)\n}\noutput[\"nodes\"] = input\n\nfunction getTotalCost(aiNodes) {\n  let totalCost = 0.0\n  for(let i=0 ; i < aiNodes.length; i++) {\n    const aiNode = aiNodes[i]\n\n    if(aiNode.ai_details != null) {\n      let aiNodeCost\n      aiNodeCost = aiNode.ai_details.cost_execution.replace('$', '')\n      totalCost += parseFloat(aiNodeCost)\n    }\n  }\n\n  return totalCost\n}\n\nreturn output"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        980,
        240
      ],
      "id": "2f6c29b3-5d67-4452-ac93-08b09d3e7685",
      "name": "Code6"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -340,
        -160
      ],
      "id": "07622f05-9127-4135-82fc-748705819166",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "url": "https://xavicascoll.app.n8n.cloud/api/v1/executions/2462",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "{\n  \"includeData\" : true\n}",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"X-N8N-API-KEY\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiYzAyNzRkMy03YWYyLTQzZjktYTU4NS1mY2M0ODQ3NDdjYzkiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzQzODQ2NDE3LCJleHAiOjE3NDYzOTYwMDB9.7fm0EcDsC7DikCxLWPS5HYp80jPPK2RpOMpQje-7t3o\",\n  \"Accept\" : \"application/json\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1440,
        -340
      ],
      "id": "bd225720-d39a-469e-a105-564f9c55a255",
      "name": "get_execution_info"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json;\nconst data = input.data;\nconst workflowInfo = input.workflowData;\nlet nodes = []\nlet nonAiNodes = []\nlet subworkflowNodes = []\nlet aiNodes = []\n\ngetNodesInfo(data)\n\nconst workFlowData = {\n  \"nombre\" : workflowInfo.name,\n  \"fecha_ejecucion\" : formatDate(input.startedAt),\n  \"duracion\" : getExecutionDuration(input.startedAt, input.stoppedAt),\n  \"ai_nodes\" : aiNodes,\n  \"normal_nodes\" : nonAiNodes,\n  \"sub_workflows\" : subworkflowNodes\n  \n}\n\n\nfunction getNodesInfo(data) {\n  let nodesCount = 0\n  \n  const object = Object.keys(data.resultData.runData);\n  object.map((node) => {\n    if( data.resultData.runData[node][0].executionStatus == 'success') {\n      nodesCount += 1;\n      nodes.push(node)\n      \n    }\n  })\n\n  for (let i = 0; i < nodes.length; i++) {\n    const element = nodes[i];\n    \n    getTypeNode(element)\n    \n  }\n}\n\nfunction getTypeNode(node){\n  for (let index = 0; index < $input.first().json.workflowData.nodes.length; index++) {\n    const element = $input.first().json.workflowData.nodes[index];\n    if(element.name == node) {\n      \n      if(element.type.includes('lmChat')) {\n        var nodeTokenInfo\n        var modelUsed\n        // AI Node\n        if(element.type.includes('Gemini') || element.type.includes('gemini')) {\n            nodeTokenInfo = $input.first().json.data.resultData.runData[element.name][0].data.ai_languageModel[0][0].json.tokenUsageEstimate\n          modelUsed = $input.first().json.data.resultData.runData[element.name][0].inputOverride.ai_languageModel[0][0].json.options.model_name\n        } else {\n          modelUsed = $input.first().json.data.resultData.runData[element.name][0].inputOverride.ai_languageModel[0][0].json.options.model\n          nodeTokenInfo = $input.first().json.data.resultData.runData[element.name][0].data.ai_languageModel[0][0].json.tokenUsage\n        }\n        \n        aiNodes.push({\n          \"node_name\" : node,\n          \"model_used\" : modelUsed,\n          \"completion_tokens\" : nodeTokenInfo.completionTokens,\n          \"prompt_tokens\" : nodeTokenInfo.promptTokens,\n          \"total_tokens\" : nodeTokenInfo.totalTokens\n        })\n      } else if( element.type.includes('agent')) {\n        aiNodes.push({\n          \"node_name\" : node,\n          \"executionTime\" :  $input.first().json.data.resultData.runData[element.name][0].executionTime\n        })\n      } \n      \n      else if(element.type.includes('toolWorkflow') || element.type.includes('executeWorkflow')&& !element.type.includes('executeWorkflowTrigger')) {\n        let nodeObject = {}\n        const runDataNode = $input.first().json.data.resultData.runData[element.name][0].metadata.subExecution\n        nodeObject[\"nombre\"] = node\n        nodeObject[\"execution_id\"] = runDataNode.executionId\n        nodeObject[\"workflow_id\"] = runDataNode.workflowId\n        subworkflowNodes.push(nodeObject)\n      } \n      else {\n        // Non AI Workflow\n        nonAiNodes.push(node)\n      }\n    } \n  }\n\n}\n\nfunction formatDate(date){\n    const dateO = new Date(date);\n\n  const day = String(dateO.getUTCDate()).padStart(2, '0');\n  const month = String(dateO.getUTCMonth() + 1).padStart(2, '0');\n  const year = dateO.getUTCFullYear();\n\n  const hours = String(dateO.getUTCHours()).padStart(2, '0');\n  const minutes = String(dateO.getUTCMinutes()).padStart(2, '0');\n  const seconds = String(dateO.getUTCSeconds()).padStart(2, '0');\n\n  return `${day}/${month}/${year} - ${hours}:${minutes}:${seconds}`;\n}\nfunction getExecutionDuration(started, ended) {\n  const startDate = new Date(started)\n  const endDate = new Date(ended)\n  const durationMS = endDate - startDate\n  return durationMS / 1000;\n}\n\n\nreturn  workFlowData\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1260,
        -340
      ],
      "id": "657a9bdf-d567-4280-9ad6-d1fefd7df60c",
      "name": "node_by_type"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a8e9a937-7e5b-4145-aabe-71c7077045bd",
              "leftValue": "={{ $json.ai_nodes[0] }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "98db7a1a-3af3-465a-813d-1a17416b02c3",
              "leftValue": "={{ $json.ai_nodes[0] }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1020,
        -640
      ],
      "id": "06f901a5-6d85-4fe6-97ae-4bd817afd907",
      "name": "has_ai_node"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "293cacaf-64ca-429f-a21e-548967e6f5d1",
              "leftValue": "={{ $json.sub_workflows }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "7ef27dab-d33b-4107-bb8f-839b58b5d8db",
              "leftValue": "={{ $json.sub_workflows }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1100,
        20
      ],
      "id": "0c230d25-22a1-44d6-abbb-1692e6ed2441",
      "name": "has_sub_workflows"
    },
    {
      "parameters": {
        "jsCode": "const normal_nodes = $input.first().json.normal_nodes\nconst nodes_runData = $('get_execution_info').first().json.data.resultData.runData\nconst workflowData  = $('get_execution_info').first().json.workflowData.nodes\nconst executedNodes = []\nconst nonAiNodes = []\ngetExecutedNodesWorkFlowData()\nfunction getExecutedNodesWorkFlowData(){\n  for(let y = 0; y < normal_nodes.length ; y ++) {\n    const nodeName = normal_nodes[y]\n    const workflowDataNode = workflowData.find((element, index) => element.name == nodeName)\n    let runDataNode = {}\n    for(const key in nodes_runData) {\n      if (key === nodeName) {\n        runDataNode = nodes_runData[key][0]\n        break\n      }\n    }\n    nonAiNodes.push({\n      \"name\" : nodeName,\n      \"type\" : workflowDataNode.type,\n      \"execution_time\" : runDataNode.executionTime\n    })\n  }  \n}\n\n\nreturn {\n  \"non_ai_nodes\" : nonAiNodes\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -700,
        -340
      ],
      "id": "d052e174-227f-42e9-aaf9-ae28c16a0268",
      "name": "non_ai_nodes_info"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json\nconst output = {}\n\noutput[\"workflow_name\"] = $('node_by_type').first().json.nombre\noutput[\"workflow_id\"] = $('get_execution_info').first().json.workflowId\noutput[\"execution_id\"] = $('get_execution_info').first().json.id\noutput[\"finished\"] = $('get_execution_info').first().json.finished\noutput[\"execution_status\"] = $('get_execution_info').first().json.status\noutput[\"execution_date\"] = $('node_by_type').first().json.fecha_ejecucion\noutput[\"execution_duration\"] = $('node_by_type').first().json.duracion\nif($input.first().json.ai_nodes != null) {\n  output[\"total_cost\"] = getTotalCost($input.first().json.ai_nodes)\n}\noutput[\"nodes\"] = input\n\n\n\nfunction getTotalCost(aiNodes) {\n  let totalCost = 0.0\n  for(let i=0 ; i < aiNodes.length; i++) {\n    const aiNode = aiNodes[i]\n\n    if(aiNode.ai_details != null) {\n      let aiNodeCost\n      aiNodeCost = aiNode.ai_details.cost_execution.replace('$', '')\n      totalCost += parseFloat(aiNodeCost)\n    }\n  }\n\n  return totalCost\n}\n\nreturn output"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -120,
        -360
      ],
      "id": "dd1e715b-14d7-4180-9aff-2fc3d88fb849",
      "name": "clean_data"
    },
    {
      "parameters": {
        "jsCode": "const input = $input\nconst output = input.first().json\nconst subworkflows = input.last().json\n\nfor(const key in output) {\n  if(key == \"sub_workflows\") {\n    var sub_workflows = $input.first().json\n    output[\"sub_workflows\"] = sub_workflows  \n  }\n}\n\noutput[\"total_cost\"] = getTotalWorkflowCost()\noutput[\"sub_workflows\"] = getSubWorkflows()\n\nfunction getSubWorkflows(){\n  if($input.all().length > 1) {\n    return $input.last().json\n  } \n}\n  \n\nfunction getTotalWorkflowCost(){\n  let totalCost = 0.0\n  let sub_workflow_total_cost = 0.0\n  \n  \n  if(sub_workflows != null) {\n    for(let i = 0; i < sub_workflows[\"\"].length ; i++) {\n      const subWorkflow = sub_workflows[\"\"][i]\n      if(subWorkflow.total_cost != null) {\n        sub_workflow_total_cost += subWorkflow.total_cost  \n      }\n    }\n  }\n  if(output.total_cost != null) {\n    totalCost = output.total_cost\n  }\n  return (totalCost + sub_workflow_total_cost).toFixed(5)\n  \n}\nreturn output\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        420,
        -340
      ],
      "id": "0b524ceb-33af-492d-b2a1-65b8045b9409",
      "name": "output_json"
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        640,
        -340
      ],
      "id": "0c30c0b6-f211-443d-ba5c-22a66f81ab9c",
      "name": "get_json_file"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "get_execution_info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_model_prices": {
      "main": [
        [
          {
            "node": "get_ai_nodes_info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [],
        []
      ]
    },
    "get_ai_nodes_info": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "clean_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          },
          {
            "node": "If3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_model_prices1": {
      "main": [
        [
          {
            "node": "get_ai_nodes_info1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "get_model_prices1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "get_ai_nodes_info1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "output_json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_execution_info": {
      "main": [
        [
          {
            "node": "node_by_type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "node_by_type": {
      "main": [
        [
          {
            "node": "has_ai_node",
            "type": "main",
            "index": 0
          },
          {
            "node": "non_ai_nodes_info",
            "type": "main",
            "index": 0
          },
          {
            "node": "has_sub_workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "has_ai_node": {
      "main": [
        [
          {
            "node": "get_model_prices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "has_sub_workflows": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "non_ai_nodes_info": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "clean_data": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output_json": {
      "main": [
        [
          {
            "node": "get_json_file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0baab97e-b603-486a-8cea-dee025acf93f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cc62a874007f4742862a8ac743b0d25166ff7840b90904530285770932bddb8b"
  },
  "id": "1gLbV5Ckx0xIvtOy",
  "tags": []
}